var BookmarksIndex = React.createClass({
  getInitialState: function() {
    return {
      bookmarks: this.props.bookmarks,
      bookmarkNewFormDisplaying: false,
      errors: {}
    }
  },

  toggleBookmarkNewFormDisplaying: function(e) {
    if (typeof(e) != "undefined") {
      e.preventDefault();
    }

    this.setState({
      bookmarkNewFormDisplaying: !this.state.bookmarkNewFormDisplaying,
      errors: {}
    });
  },

  handleNewSubmit: function(newBookmark, success, error) {
    var oldBookmarks = this.state.bookmarks;
    var lastBookmarkId;

    if (oldBookmarks.length > 0) {
      lastBookmarkId = oldBookmarks[oldBookmarks.length - 1].id;
    } else {
      lastBookmarkId = 0;
    }

    newBookmark.id = lastBookmarkId + 1;

    var newBookmarks = oldBookmarks.concat([newBookmark.bookmark]);
    this.setState({bookmarks: newBookmarks});

    this.handleSubmit(
      "/bookmarks.json",
      "POST",
      newBookmark,
      oldBookmarks,
      success,
      error
    );
  },

  handleEditSubmit: function(bookmark, success, error) {
    newBookmark = bookmark.bookmark;

    var oldBookmarks = this.state.bookmarks;
    var newBookmarks = oldBookmarks.slice(0);

    var bookmarkIndex = newBookmarks.findIndex(function(bookmarkComponent) {
      return newBookmark.id == bookmarkComponent.id
    });

    newBookmarks[bookmarkIndex] = newBookmark;

    this.handleSubmit(
      "/bookmarks/" + newBookmark.id,
      "PATCH",
      {bookmark: newBookmark},
      oldBookmarks,
      success,
      error
    );
  },

  handleDelete(bookmarkToDeleteId, success, error) {
    var oldBookmarks = this.state.bookmarks;

    var newBookmarks = oldBookmarks.filter(function(bookmark) {
      return bookmark.id != bookmarkToDeleteId;
    });

    this.setState({bookmarks: newBookmarks});

    this.handleSubmit(
      "/bookmarks/" + bookmarkToDeleteId + ".json",
      "DELETE",
      null,
      oldBookmarks,
      success,
      error
    );
  },

  handleSubmit: function(endpoint, method, newBookmark, oldBookmarks, success, error) {
    $.ajax({
      url: endpoint,
      dataType: "json",
      type: method,
      data: newBookmark,

      success: function(data) {
        this.setState({bookmarks: data, errors: {}});

        if (typeof(success) != "undefined") {
          success();
        }
      }.bind(this),

      error: function(xhr, status, err) {
        var errors = xhr.responseJSON;

        this.setState({
          bookmarks: oldBookmarks,
        });


        if (typeof(error) != "undefined") {
          error(errors);
        }
      }.bind(this),
    });
  },

  headerSupplement: function() {
    var headerSupplement;

    if (typeof(this.props.taggedWith) != "undefined") {
      headerSupplement = (
        <span>Tagged with
          #{this.props.taggedWith}
        </span>
      );
    } else {
      headerSupplement = (
        <a
          href="#"
          className="button button-green"
          onClick={this.toggleBookmarkNewFormDisplaying}
        >
          Add bookmark
        </a>
      );
    }

    return headerSupplement;
  },

  render: function() {
    return (
      <div className="container">
        <header className="title">
          <h2>Your Bookmarks</h2>
          <span className="right-abs">
            {this.headerSupplement()}
          </span>
        </header>

        <BookmarksList
          bookmarks={this.state.bookmarks}
          onDelete={this.handleDelete}
          onSubmit={this.handleEditSubmit}
        />

        <BookmarkNewForm
          displaying={this.state.bookmarkNewFormDisplaying}
          toggleDisplaying={this.toggleBookmarkNewFormDisplaying}
          errors={this.state.errors}
          onSubmit={this.handleNewSubmit}
        />
      </div>
    );
  }
});
