//= require react-tagsinput

var BookmarkForm = React.createClass({
  getDefaultProps: function() {
    return {
      data: {
        id: null,
        title: "",
        url: "",
        tags: []
      },
    };
  },

  getInitialState: function() {
    return {
      id: this.props.data.id,
      title: this.props.data.title,
      url: this.props.data.url,
      tags: this.props.data.tags,
      errors: {}
    }
  },

  onKeyUp: function(e) {
    if (e.which == 27) { // esc
      this.props.toggleDisplaying(e);
    }
  },

  componentDidUpdate: function(prevProps, prevState) {
    if (this.props.displaying != prevProps.displaying) {
      if (this.props.displaying) {
        this.titleField().focus();
      } else {
        // unbind all the events
        this.titleField().blur(); // prevent typing on hidden field
        this.setState(this.getInitialState());
      }
    }
  },

  titleField: function() {
    return ReactDOM.findDOMNode(this.refs.titleField);
  },

  displayingClass: function() {
    return this.props.displaying ? "" : "hidden"
  },

  tagList: function() {
    return this.state.tags.map(function(tag) {
      return tag.name;
    });
  },

  handleTitleChange: function(e) {
    this.setState({title: e.target.value});
  },

  handleUrlChange: function(e) {
    this.setState({url: e.target.value});
  },

  handleTagsChange: function(tagList) {
    var tags = tagList.map(function(name) {
      return {name: name};
    });

    this.setState({tags: tags});
  },

  handleSubmit: function(e) {
    e.preventDefault();

    var id = this.state.id;
    var title = this.state.title.trim();
    var url = this.state.url.trim();

    // These are both needed. tag_list is for the server, and tags is for the React component.
    var tag_list = this.tagList().join(",");
    var tags = this.state.tags;

    this.props.onSubmit(
      {bookmark: {
        id: id,
        title: title,
        url: url,
        tag_list: tag_list,
        tags: tags
      }},

      function() {
        this.setState({title: "", url: ""});
        this.props.toggleDisplaying(e);
      }.bind(this),

      function(errors) {
        this.titleField().focus();
        this.setState({errors: errors});
      }.bind(this),
    );
  },


  render: function() {
    return(
      <div>
        <form className={this.displayingClass() + " modal"} onSubmit={this.handleSubmit} onKeyUp={this.onKeyUp}>
          <h2>{this.props.headerText}</h2>

          <section>
            <label htmlFor="bookmark_title">
              Title
            </label>

            <InputWithErrors errors={this.state.errors.title}>
              <input type="text" id="bookmark_title" value={this.state.title} onChange={this.handleTitleChange} ref="titleField" />
            </InputWithErrors>
          </section>

          <section>
            <label htmlFor="bookmark_url">
              URL
            </label>

            <InputWithErrors errors={this.state.errors.url}>
              <input type="text" id="bookmark_url" value={this.state.url} onChange={this.handleUrlChange} />
            </InputWithErrors>
          </section>

          <section>
            <label htmlFor="tags">
              Tags
            </label>

            <InputWithErrors errors={this.state.errors.tag_list}>
              <ReactTagsInput value={this.tagList()} onChange={this.handleTagsChange} />
            </InputWithErrors>
          </section>

          <section className="controls">
            <a href="#" onClick={this.props.toggleDisplaying}>Cancel</a>
            <input type="submit" value="Save" className="button button-green" />
          </section>
        </form>

        <div className={this.displayingClass() + " modal-overlay"} />
      </div>
    );
  }
});
