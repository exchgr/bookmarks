var BookmarkNewForm = React.createClass({
  getInitialState: function() {
    return {
      title: "",
      url: ""
    }
  },

  componentDidMount: function() {
    // keep track of state values
    this.renderedForm().on(
      "input",
      "#bookmark_title",
      this.handleTitleChange
    );

    this.renderedForm().on(
      "input",
      "#bookmark_url",
      this.handleUrlChange
    );

    // handle submits
    this.renderedForm().on(
      "submit",
      this.handleSubmit
    );
  },

  componentDidUpdate: function(prevProps, prevState) {
    var titleField = this.renderedForm().
      find("#bookmark_title");

    if (this.props.displaying != prevProps.displaying) {
      if (this.props.displaying) {
        titleField.focus();

        // make "Cancel" hide
        this.renderedForm().on(
          "click",
          ".cancel",
          this.props.toggleDisplaying
        );

        // press esc to hide
        this.renderedForm().on(
          "keyup",
          function(e) {
            if (e.which == 27) {
              this.props.toggleDisplaying(e);
            }
          }.bind(this)
        );
      } else {
        this.renderedForm().off("click", ".cancel");
        this.renderedForm().off("keyup");
        titleField.blur(); // prevent typing on hidden field
        this.setState({title: "", url: ""});
      }
    }
  },

  formToRender: function() {
    return $(".interactive-components .bookmark-new-form");
  },

  formErrorToRender: function() {
    return $(".interactive-components .bookmark-form-error");
  },

  formHtml: function() {
    var dom = this.formToRender().clone();

    Object.keys(this.props.errors).forEach(function(error) {
      var textField = dom.find("input#bookmark_" + error);
      var errorMessages = this.props.errors[error];

      var errorMessagesDom = errorMessages.map(function(errorMessage) {
        // create a working copy of the error html from the template
        var error = this.formErrorToRender().html();

        return $(error).html(errorMessage);
      }.bind(this));

      textField.after(errorMessagesDom);
      textField.wrap('<div class="field_with_errors"></div>');
    }.bind(this));

    var html = dom.html();

    return {__html: html};
  },

  renderedForm: function() {
    return $(".rendered-bookmark-new-form");
  },

  displayingClass: function() {
    return this.props.displaying ? "" : "hidden"
  },

  handleTitleChange: function(e) {
    this.setState({title: e.target.value});
  },

  handleUrlChange: function(e) {
    this.setState({url: e.target.value});
  },

  handleSubmit: function(e) {
    e.preventDefault();

    var title = this.state.title.trim();
    var url = this.state.url.trim();

    if (!title || !url) {
      return;
    }
    this.props.onSubmit(
      {bookmark: {title: title, url: url}},

      function() {
        this.setState({title: "", url: ""});
        this.props.toggleDisplaying(e);
      }.bind(this),

      function(errors) {
      }.bind(this)
    );
  },

  render: function() {
    return (
      <div>
        <div className={this.props.className + " " + this.displayingClass() + " modal rendered-bookmark-new-form"} dangerouslySetInnerHTML={this.formHtml()} />
        <div className={this.props.className + " " + this.displayingClass() + " modal-overlay"} />
      </div>
    );
  }
});
